# 문제
# 다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.

# int fibonacci(int n) {
#     if (n == 0) {
#         printf("0");
#         return 0;
#     } else if (n == 1) {
#         printf("1");
#         return 1;
#     } else {
#         return fibonacci(n‐1) + fibonacci(n‐2);
#     }
# }
# fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.

# fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
# fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
# 두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
# fibonacci(0)은 0을 출력하고, 0을 리턴한다.
# fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
# 첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
# fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.
# 1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다.

# 각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.

# 출력
# 각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.

# 예제 입력 1 
# 3
# 0
# 1
# 3
# 예제 출력 1 
# 1 0
# 0 1
# 1 2
# 예제 입력 2 
# 2
# 6
# 22
# 예제 출력 2 
# 5 8
# 10946 17711



# 정답

# fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 저장할 리스트
# dp[i][0]은 i번째 피보나치 수를 구할 때 0이 출력되는 횟수
# dp[i][1]은 i번째 피보나치 수를 구할 때 1이 출력되는 횟수
# N이 최대 40까지 주어지므로, 0부터 40까지 총 41개의 요소를 저장할 수 있게 리스트를 만듦
dp = [[0, 0] for _ in range(41)]

# 피보나치 수를 구할 때 0과 1이 몇 번 출력되는지 미리 계산하는 함수
def calculate_fibonacci_counts():
    """
    0부터 40까지의 피보나치 수에 대해
    0과 1의 출력 횟수를 미리 계산하여 dp 리스트에 저장합니다.
    """
    # 0번째 피보나치 수
    # fibonacci(0)은 '0'을 1번 출력하고 '1'을 0번 출력합니다.
    dp[0][0] = 1
    dp[0][1] = 0

    # 1번째 피보나치 수
    # fibonacci(1)은 '0'을 0번 출력하고 '1'을 1번 출력합니다.
    dp[1][0] = 0
    dp[1][1] = 1

    # 2부터 40까지의 피보나치 수에 대해 0과 1의 출력 횟수 계산
    # 재귀 호출 관계: fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)
    # 따라서, n번째 피보나치 수에서 0의 출력 횟수는
    # (n-1)번째 0의 출력 횟수 + (n-2)번째 0의 출력 횟수와 같습니다.
    # 1의 출력 횟수도 동일한 방식으로 계산됩니다.
    for i in range(2, 41): # 2부터 40까지 반복
        dp[i][0] = dp[i-1][0] + dp[i-2][0] # 0의 출력 횟수
        dp[i][1] = dp[i-1][1] + dp[i-2][1] # 1의 출력 횟수

# 메인 실행 부분
if __name__ == "__main__":
    # 미리 0부터 40까지 모든 피보나치 수의 0과 1 출력 횟수를 계산해 둠
    calculate_fibonacci_counts()

    # 테스트 케이스의 개수 T를 입력받음
    T = int(input())

    # T번 반복하여 각 테스트 케이스를 처리
    for _ in range(T):
        # N번째 피보나치 수를 구할 N을 입력받음
        N = int(input())
        # 계산된 결과(dp 리스트에 저장된 0과 1의 출력 횟수)를 공백으로 구분하여 출력
        print(dp[N][0], dp[N][1])




















